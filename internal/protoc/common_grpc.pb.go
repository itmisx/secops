// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: common.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonClient is the client API for Common service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonClient interface {
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Common_HeartbeatClient, error)
	NewShell(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Common_NewShellClient, error)
	ShellCMD(ctx context.Context, opts ...grpc.CallOption) (Common_ShellCMDClient, error)
	Upload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Common_UploadClient, error)
	Download(ctx context.Context, opts ...grpc.CallOption) (Common_DownloadClient, error)
}

type commonClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonClient(cc grpc.ClientConnInterface) CommonClient {
	return &commonClient{cc}
}

func (c *commonClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Common_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Common_ServiceDesc.Streams[0], "/common.Common/heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonHeartbeatClient{stream}
	return x, nil
}

type Common_HeartbeatClient interface {
	Send(*NodeInfo) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type commonHeartbeatClient struct {
	grpc.ClientStream
}

func (x *commonHeartbeatClient) Send(m *NodeInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commonHeartbeatClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commonClient) NewShell(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Common_NewShellClient, error) {
	stream, err := c.cc.NewStream(ctx, &Common_ServiceDesc.Streams[1], "/common.Common/newShell", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonNewShellClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Common_NewShellClient interface {
	Recv() (*ShellSession, error)
	grpc.ClientStream
}

type commonNewShellClient struct {
	grpc.ClientStream
}

func (x *commonNewShellClient) Recv() (*ShellSession, error) {
	m := new(ShellSession)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commonClient) ShellCMD(ctx context.Context, opts ...grpc.CallOption) (Common_ShellCMDClient, error) {
	stream, err := c.cc.NewStream(ctx, &Common_ServiceDesc.Streams[2], "/common.Common/shellCMD", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonShellCMDClient{stream}
	return x, nil
}

type Common_ShellCMDClient interface {
	Send(*ShellCMD) error
	Recv() (*ShellCMD, error)
	grpc.ClientStream
}

type commonShellCMDClient struct {
	grpc.ClientStream
}

func (x *commonShellCMDClient) Send(m *ShellCMD) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commonShellCMDClient) Recv() (*ShellCMD, error) {
	m := new(ShellCMD)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commonClient) Upload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Common_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Common_ServiceDesc.Streams[3], "/common.Common/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonUploadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Common_UploadClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type commonUploadClient struct {
	grpc.ClientStream
}

func (x *commonUploadClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commonClient) Download(ctx context.Context, opts ...grpc.CallOption) (Common_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Common_ServiceDesc.Streams[4], "/common.Common/download", opts...)
	if err != nil {
		return nil, err
	}
	x := &commonDownloadClient{stream}
	return x, nil
}

type Common_DownloadClient interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ClientStream
}

type commonDownloadClient struct {
	grpc.ClientStream
}

func (x *commonDownloadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commonDownloadClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommonServer is the server API for Common service.
// All implementations must embed UnimplementedCommonServer
// for forward compatibility
type CommonServer interface {
	Heartbeat(Common_HeartbeatServer) error
	NewShell(*Empty, Common_NewShellServer) error
	ShellCMD(Common_ShellCMDServer) error
	Upload(*Empty, Common_UploadServer) error
	Download(Common_DownloadServer) error
	mustEmbedUnimplementedCommonServer()
}

// UnimplementedCommonServer must be embedded to have forward compatible implementations.
type UnimplementedCommonServer struct {
}

func (UnimplementedCommonServer) Heartbeat(Common_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCommonServer) NewShell(*Empty, Common_NewShellServer) error {
	return status.Errorf(codes.Unimplemented, "method NewShell not implemented")
}
func (UnimplementedCommonServer) ShellCMD(Common_ShellCMDServer) error {
	return status.Errorf(codes.Unimplemented, "method ShellCMD not implemented")
}
func (UnimplementedCommonServer) Upload(*Empty, Common_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedCommonServer) Download(Common_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedCommonServer) mustEmbedUnimplementedCommonServer() {}

// UnsafeCommonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonServer will
// result in compilation errors.
type UnsafeCommonServer interface {
	mustEmbedUnimplementedCommonServer()
}

func RegisterCommonServer(s grpc.ServiceRegistrar, srv CommonServer) {
	s.RegisterService(&Common_ServiceDesc, srv)
}

func _Common_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommonServer).Heartbeat(&commonHeartbeatServer{stream})
}

type Common_HeartbeatServer interface {
	SendAndClose(*Empty) error
	Recv() (*NodeInfo, error)
	grpc.ServerStream
}

type commonHeartbeatServer struct {
	grpc.ServerStream
}

func (x *commonHeartbeatServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commonHeartbeatServer) Recv() (*NodeInfo, error) {
	m := new(NodeInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Common_NewShell_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommonServer).NewShell(m, &commonNewShellServer{stream})
}

type Common_NewShellServer interface {
	Send(*ShellSession) error
	grpc.ServerStream
}

type commonNewShellServer struct {
	grpc.ServerStream
}

func (x *commonNewShellServer) Send(m *ShellSession) error {
	return x.ServerStream.SendMsg(m)
}

func _Common_ShellCMD_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommonServer).ShellCMD(&commonShellCMDServer{stream})
}

type Common_ShellCMDServer interface {
	Send(*ShellCMD) error
	Recv() (*ShellCMD, error)
	grpc.ServerStream
}

type commonShellCMDServer struct {
	grpc.ServerStream
}

func (x *commonShellCMDServer) Send(m *ShellCMD) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commonShellCMDServer) Recv() (*ShellCMD, error) {
	m := new(ShellCMD)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Common_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommonServer).Upload(m, &commonUploadServer{stream})
}

type Common_UploadServer interface {
	Send(*File) error
	grpc.ServerStream
}

type commonUploadServer struct {
	grpc.ServerStream
}

func (x *commonUploadServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _Common_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommonServer).Download(&commonDownloadServer{stream})
}

type Common_DownloadServer interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ServerStream
}

type commonDownloadServer struct {
	grpc.ServerStream
}

func (x *commonDownloadServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commonDownloadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Common_ServiceDesc is the grpc.ServiceDesc for Common service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Common_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.Common",
	HandlerType: (*CommonServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "heartbeat",
			Handler:       _Common_Heartbeat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "newShell",
			Handler:       _Common_NewShell_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "shellCMD",
			Handler:       _Common_ShellCMD_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "upload",
			Handler:       _Common_Upload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "download",
			Handler:       _Common_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}
